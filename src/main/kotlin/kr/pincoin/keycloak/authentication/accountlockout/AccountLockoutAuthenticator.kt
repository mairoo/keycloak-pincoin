package kr.pincoin.keycloak.authentication.accountlockout

import jakarta.ws.rs.core.MediaType
import jakarta.ws.rs.core.Response
import kr.pincoin.keycloak.events.AccountLockoutService
import org.keycloak.authentication.AuthenticationFlowContext
import org.keycloak.authentication.Authenticator
import org.keycloak.models.KeycloakSession
import org.keycloak.models.RealmModel
import org.keycloak.models.UserModel

class AccountLockoutAuthenticator : Authenticator {

    companion object {
        // Redis ÏÑ§Ï†ï ÌÇ§Îì§ (FactoryÏôÄ ÎèôÏùº)
        const val REDIS_HOST_CONFIG = "redis.host"
        const val REDIS_PORT_CONFIG = "redis.port"
        const val REDIS_PASSWORD_CONFIG = "redis.password"
        const val REDIS_DATABASE_CONFIG = "redis.database"

        // Í∏∞Î≥∏Í∞íÎì§
        const val DEFAULT_REDIS_HOST = "localhost"
        const val DEFAULT_REDIS_PORT = 6379
        const val DEFAULT_REDIS_DATABASE = 0
    }

    private val accountLockoutService: AccountLockoutService by lazy {
        AccountLockoutService().apply {
            // Í∏∞Î≥∏Í∞íÏúºÎ°ú Redis Ï¥àÍ∏∞Ìôî (FactoryÏóêÏÑú ÏÑ§Ï†ïÍ∞í Ï†ÑÎã¨Î∞õÏùÑ ÏàòÎèÑ ÏûàÏùå)
            initializeRedisPool(DEFAULT_REDIS_HOST, DEFAULT_REDIS_PORT, null, DEFAULT_REDIS_DATABASE)
        }
    }

    override fun authenticate(context: AuthenticationFlowContext) {
        val user = context.user
        if (user == null) {
            // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏãùÎ≥ÑÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ ÌÜµÍ≥º (Username/Password Îã®Í≥ÑÏóêÏÑú Ï≤òÎ¶¨)
            context.success()
            return
        }

        try {
            // Redis ÏÑ§Ï†ïÍ∞í Í∞ÄÏ†∏Ïò§Í∏∞ (Factory ÏÑ§Ï†ï ÌôúÏö©)
            initializeServiceWithConfig(context)

            // Í≥ÑÏ†ï Ï∞®Îã® ÏÉÅÌÉú ÌôïÏù∏
            val realmName = context.realm.name
            val lockStatus = accountLockoutService.getAccountLockStatus(realmName, user.id)

            if (lockStatus.isLocked) {
                // Ï∞®Îã®Îêú Í≥ÑÏ†ïÏù∏ Í≤ΩÏö∞ Ï†ëÍ∑º Í±∞Î∂Ä
                handleAccountLocked(context, lockStatus)
                return
            }

            // Ï∞®Îã®ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ ÌÜµÍ≥º
            context.success()

        } catch (e: Exception) {
            println("Account Lockout ÌôïÏù∏ Ïò§Î•ò: ${e.message}")
            // Ïò§Î•ò Î∞úÏÉù Ïãú ÌÜµÍ≥º (fail-open Ï†ïÏ±Ö)
            context.success()
        }
    }

    override fun action(context: AuthenticationFlowContext) {
        // Ïù¥ AuthenticatorÎäî ÏÇ¨Ïö©Ïûê Ïï°ÏÖòÏùÑ Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÏùå
        context.success()
    }

    private fun initializeServiceWithConfig(context: AuthenticationFlowContext) {
        try {
            // Factory ÏÑ§Ï†ïÍ∞íÏù¥ ÏûàÎã§Î©¥ Service Ïû¨Ï¥àÍ∏∞Ìôî
            val config = context.authenticatorConfig?.config
            if (config != null) {
                val redisHost = config[REDIS_HOST_CONFIG] ?: DEFAULT_REDIS_HOST
                val redisPort = config[REDIS_PORT_CONFIG]?.toIntOrNull() ?: DEFAULT_REDIS_PORT
                val redisPassword = config[REDIS_PASSWORD_CONFIG]?.takeIf { it.isNotBlank() }
                val redisDatabase = config[REDIS_DATABASE_CONFIG]?.toIntOrNull() ?: DEFAULT_REDIS_DATABASE

                // Service Redis Ïó∞Í≤∞ Ïû¨Ï¥àÍ∏∞Ìôî (ÏÑ§Ï†ïÏù¥ Î≥ÄÍ≤ΩÎêú Í≤ΩÏö∞)
                accountLockoutService.initializeRedisPool(redisHost, redisPort, redisPassword, redisDatabase)
            }
        } catch (e: Exception) {
            println("Account Lockout Service ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî Ïò§Î•ò: ${e.message}")
        }
    }

    private fun handleAccountLocked(context: AuthenticationFlowContext, lockStatus: AccountLockoutService.AccountLockStatus) {
        // Ïù¥Î≤§Ìä∏ Î°úÍπÖ
        context.event.error(org.keycloak.events.Errors.USER_TEMPORARILY_DISABLED)

        // Ï∞®Îã® Ï†ïÎ≥¥ Ï§ÄÎπÑ
        val remainingTime = lockStatus.getRemainingTimeFormatted()
        val lockTimestamp = lockStatus.getLockTimestampFormatted() ?: "Ïïå Ïàò ÏóÜÏùå"
        val failureCount = lockStatus.failureCount
        val lockDuration = when (lockStatus.lockDuration) {
            "1h" -> "1ÏãúÍ∞Ñ"
            "24h" -> "24ÏãúÍ∞Ñ"
            else -> "ÏùºÏãúÏ†Å"
        }

        // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î≥¥Ïó¨Ï§Ñ HTML ÌéòÏù¥ÏßÄ ÏÉùÏÑ±
        val htmlContent = createAccountLockedHtml(
            remainingTime = remainingTime,
            lockTimestamp = lockTimestamp,
            failureCount = failureCount,
            lockDuration = lockDuration,
            realmDisplayName = context.realm.displayName ?: context.realm.name,
            remainingSeconds = lockStatus.remainingSeconds  // ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï†ÑÎã¨
        )

        val response = Response.status(423) // 423 Locked
            .entity(htmlContent)
            .type(MediaType.TEXT_HTML)
            .header("Retry-After", lockStatus.remainingSeconds.toString())
            .build()

        context.challenge(response)

        // Í¥ÄÎ¶¨Ïûê Î°úÍπÖ
        println("üîí Account Lockout: Ï∞®Îã®Îêú Í≥ÑÏ†ï Ï†ëÍ∑º ÏãúÎèÑ")
        println("  - User ID: ${context.user?.id}")
        println("  - Username: ${context.user?.username}")
        println("  - Realm: ${context.realm.name}")
        println("  - Lock Duration: $lockDuration")
        println("  - Remaining Time: $remainingTime")
        println("  - Failure Count: $failureCount")
        println("  - Lock Timestamp: $lockTimestamp")
    }

    private fun createAccountLockedHtml(
        remainingTime: String,
        lockTimestamp: String,
        failureCount: Int,
        lockDuration: String,
        realmDisplayName: String,
        remainingSeconds: Int  // ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï∂îÍ∞Ä
    ): String {
        return """
        <!DOCTYPE html>
        <html lang="ko">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Í≥ÑÏ†ï Ï∞®Îã® - $realmDisplayName</title>
            <style>
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }
                
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: #333;
                }
                
                .lockout-container {
                    background: white;
                    border-radius: 20px;
                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
                    max-width: 500px;
                    width: 90%;
                    padding: 40px;
                    text-align: center;
                    position: relative;
                    overflow: hidden;
                }
                
                .lockout-container::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    height: 4px;
                    background: linear-gradient(90deg, #ff6b6b, #feca57, #48dbfb, #ff9ff3);
                }
                
                .lock-icon {
                    font-size: 80px;
                    color: #e74c3c;
                    margin-bottom: 20px;
                    animation: shake 0.5s ease-in-out;
                }
                
                @keyframes shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
                
                .lockout-title {
                    font-size: 28px;
                    font-weight: bold;
                    color: #2c3e50;
                    margin-bottom: 15px;
                }
                
                .lockout-subtitle {
                    font-size: 16px;
                    color: #7f8c8d;
                    margin-bottom: 30px;
                }
                
                .lockout-info {
                    background: #f8f9fa;
                    border-radius: 15px;
                    padding: 25px;
                    margin: 20px 0;
                    border-left: 5px solid #e74c3c;
                }
                
                .info-row {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin: 10px 0;
                    padding: 8px 0;
                    border-bottom: 1px solid #ecf0f1;
                }
                
                .info-row:last-child {
                    border-bottom: none;
                }
                
                .info-label {
                    font-weight: 600;
                    color: #34495e;
                }
                
                .info-value {
                    color: #e74c3c;
                    font-weight: bold;
                }
                
                .remaining-time {
                    font-size: 24px;
                    color: #e74c3c;
                    font-weight: bold;
                    margin: 20px 0;
                    padding: 15px;
                    background: linear-gradient(135deg, #fff5f5, #ffe6e6);
                    border-radius: 10px;
                    border: 2px solid #ffcdd2;
                }
                
                .help-section {
                    margin-top: 30px;
                    padding-top: 20px;
                    border-top: 1px solid #ecf0f1;
                }
                
                .help-title {
                    font-size: 18px;
                    font-weight: 600;
                    color: #2c3e50;
                    margin-bottom: 15px;
                }
                
                .help-list {
                    text-align: left;
                    color: #555;
                    line-height: 1.6;
                }
                
                .help-list li {
                    margin: 8px 0;
                    padding-left: 10px;
                    position: relative;
                }
                
                .help-list li::before {
                    content: "‚Ä¢";
                    color: #3498db;
                    font-weight: bold;
                    position: absolute;
                    left: 0;
                }
                
                .contact-info {
                    margin-top: 20px;
                    padding: 15px;
                    background: #e8f4fd;
                    border-radius: 10px;
                    color: #2980b9;
                    font-size: 14px;
                }
                
                .footer {
                    margin-top: 30px;
                    padding-top: 20px;
                    border-top: 1px solid #ecf0f1;
                    color: #95a5a6;
                    font-size: 12px;
                }
                
                @media (max-width: 600px) {
                    .lockout-container {
                        padding: 30px 20px;
                    }
                    
                    .lock-icon {
                        font-size: 60px;
                    }
                    
                    .lockout-title {
                        font-size: 24px;
                    }
                    
                    .info-row {
                        flex-direction: column;
                        align-items: flex-start;
                        gap: 5px;
                    }
                }
            </style>
        </head>
        <body>
            <div class="lockout-container">
                <div class="lock-icon">üîí</div>
                
                <h1 class="lockout-title">Í≥ÑÏ†ïÏù¥ Ï∞®Îã®ÎêòÏóàÏäµÎãàÎã§</h1>
                <p class="lockout-subtitle">Î≥¥ÏïàÏùÑ ÏúÑÌï¥ Í∑ÄÌïòÏùò Í≥ÑÏ†ïÏóê ÎåÄÌïú Ï†ëÍ∑ºÏù¥ ÏûÑÏãúÏ†ÅÏúºÎ°ú Ï†úÌïúÎêòÏóàÏäµÎãàÎã§</p>
                
                <div class="lockout-info">
                    <div class="info-row">
                        <span class="info-label">Ï∞®Îã® Ïú†Ìòï</span>
                        <span class="info-value">${lockDuration} Ï∞®Îã®</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Î°úÍ∑∏Ïù∏ Ïã§Ìå® ÌöüÏàò</span>
                        <span class="info-value">${failureCount}Ìöå</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Ï∞®Îã® ÏãúÏûë ÏãúÍ∞Ñ</span>
                        <span class="info-value">${lockTimestamp}</span>
                    </div>
                </div>
                
                <div class="remaining-time">
                    ‚è∞ ÎÇ®ÏùÄ ÏãúÍ∞Ñ: $remainingTime
                </div>
                
                <div class="help-section">
                    <h3 class="help-title">‚ùì Ïù¥Îü∞ Í≤ΩÏö∞Ïóê Í≥ÑÏ†ïÏù¥ Ï∞®Îã®Îê©ÎãàÎã§</h3>
                    <ul class="help-list">
                        <li>ÏûòÎ™ªÎêú ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ïó¨Îü¨ Î≤à ÏûÖÎ†•Ìïú Í≤ΩÏö∞</li>
                        <li>2Ï∞® Ïù∏Ï¶ù(OTP) ÏΩîÎìúÎ•º ÏûòÎ™ª ÏûÖÎ†•Ìïú Í≤ΩÏö∞</li>
                        <li>ÏùòÏã¨Ïä§Îü¨Ïö¥ Î°úÍ∑∏Ïù∏ ÌôúÎèôÏù¥ Í∞êÏßÄÎêú Í≤ΩÏö∞</li>
                        <li>Î≥¥Ïïà Ï†ïÏ±ÖÏóê Îî∞Î•∏ ÏûêÎèô Ï∞®Îã®</li>
                    </ul>
                    
                    <div class="contact-info">
                        <strong>üìû Î¨∏ÏùòÏÇ¨Ìï≠Ïù¥ ÏûàÏúºÏãúÎã§Î©¥</strong><br>
                        ÏãúÏä§ÌÖú Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Ïó∞ÎùΩÌïòÏãúÍ±∞ÎÇò Í≥†Í∞ùÏßÄÏõêÏÑºÌÑ∞Î°ú Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî.
                    </div>
                </div>
                
                <div class="footer">
                    <p>${realmDisplayName} Î≥¥Ïïà ÏãúÏä§ÌÖú</p>
                    <p>Ïù¥ ÌéòÏù¥ÏßÄÎäî ÏûêÎèôÏúºÎ°ú ÏÉàÎ°úÍ≥†Ïπ®Îê©ÎãàÎã§</p>
                </div>
            </div>
            
            <script>
                // 1Î∂ÑÎßàÎã§ ÌéòÏù¥ÏßÄ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® (Ï∞®Îã® Ìï¥Ï†ú ÌôïÏù∏Ïö©)
                setTimeout(function() {
                    window.location.reload();
                }, 60000);
                
                // ÎÇ®ÏùÄ ÏãúÍ∞Ñ Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ (ÏÑ†ÌÉùÏ†Å)
                let remainingSeconds = ${remainingSeconds};
                
                if (remainingSeconds > 0) {
                    const updateTimer = setInterval(function() {
                        remainingSeconds--;
                        
                        if (remainingSeconds <= 0) {
                            clearInterval(updateTimer);
                            window.location.reload();
                            return;
                        }
                        
                        const hours = Math.floor(remainingSeconds / 3600);
                        const minutes = Math.floor((remainingSeconds % 3600) / 60);
                        const seconds = remainingSeconds % 60;
                        
                        let timeStr = '';
                        if (hours > 0) timeStr += hours + 'ÏãúÍ∞Ñ ';
                        if (minutes > 0) timeStr += minutes + 'Î∂Ñ ';
                        if (seconds > 0 || timeStr === '') timeStr += seconds + 'Ï¥à';
                        
                        const timeElement = document.querySelector('.remaining-time');
                        if (timeElement) {
                            timeElement.innerHTML = '‚è∞ ÎÇ®ÏùÄ ÏãúÍ∞Ñ: ' + timeStr;
                        }
                    }, 1000);
                }
            </script>
        </body>
        </html>
        """.trimIndent()
    }

    override fun requiresUser(): Boolean = false // ÏÇ¨Ïö©Ïûê ÏãùÎ≥Ñ Ï†ÑÏóêÎèÑ Ïã§Ìñâ Í∞ÄÎä•

    override fun configuredFor(session: KeycloakSession, realm: RealmModel, user: UserModel): Boolean = true

    override fun setRequiredActions(session: KeycloakSession, realm: RealmModel, user: UserModel) = Unit

    override fun close() {
        try {
            accountLockoutService.close()
        } catch (e: Exception) {
            println("Account Lockout Authenticator Ï¢ÖÎ£å Ïò§Î•ò: ${e.message}")
        }
    }
}